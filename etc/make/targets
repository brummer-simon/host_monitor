# Make Target definition
# Author: Simon Brummer <simon.brummer@posteo.de>

include $(ETC_MAKE_DIR)/sanity_checks

# Setup phony and silent targets
.PHONY: run_sanity_checks \
        create_project_structure \
        prebuild \
        prebuild_doc \
        postbuild \
        clean_debug \
        clean_release \
        clean_gtest \
        clean_doc \
        clean_all \
        install_include \
        uninstall_include

.SILENT: create_project_structure \
         prebuild_doc \
         clean_debug \
         clean_release \
         clean_gtest \
         clean_doc \
         clean_all \
         run_debug \
         run_release \
         run_gtest

# The usual make black magic goes here...
# 1) Append Project Type specific flags for compilation and linkage
ifeq ($(PROJECT_TYPE), libshared)
CPPFLAGS_DEBUG   += -fPIC
CPPFLAGS_RELEASE += -fPIC
LDFLAGS_DEBUG    += -shared
LDFLAGS_RELEASE  += -shared
endif

# 2) Define pattern rules for each build configuration
# 2.1) Debug build pattern rule
$(OBJ_DEBUG_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(info $(info )Compiling: $<)
	$(CC) -c $(STD) $(CPPFLAGS) $(CPPFLAGS_DEBUG) $(INCLUDES) $(DEFINES) $(WARNINGS) $< -o $@

# 2.2) Release build pattern rule
$(OBJ_RELEASE_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(info $(info )Compiling: $<)
	$(CC) -c $(STD) $(CPPFLAGS) $(CPPFLAGS_RELEASE) $(INCLUDES) $(DEFINES) $(WARNINGS) $< -o $@

# 2.3) Unit test build pattern rule
$(OBJ_GTEST_DIR)/%.o: $(GTEST_DIR)/%.cpp
	$(info $(info )Compiling: $<)
	$(CC) -c $(STD) $(CPPFLAGS) $(CPPFLAGS_GTEST) $(INCLUDES) $(DEFINES) $(WARNINGS) $< -o $@

# 2) Generate Object file names via substitution.
OBJ       := $(SRC:%.cpp=%.o)
GTEST_OBJ := $(GTEST_SRC:%.cpp=%.o)

# 3) Generate Paths to the plain object, source files and dist locations.
OBJ_DEBUG   := $(OBJ:%=$(OBJ_DEBUG_DIR)/%)
OBJ_RELEASE := $(OBJ:%=$(OBJ_RELEASE_DIR)/%)
OBJ_GTEST   := $(GTEST_OBJ:%=$(OBJ_GTEST_DIR)/%)

DIST_INC_DIR := $(DIST_INC_DIR)/$(PROJECT_NAME)

# 4) Linker/Archiver targets.
$(BIN_DEBUG): $(OBJ_DEBUG)
ifdef USE_LINKER
	$(info $(info )Linking $@:)
	$(CC) $(LDFLAGS) $(LDFLAGS_DEBUG) $(OBJ_DEBUG) -o $(BIN_DEBUG) $(LIBS_DEBUG)
endif
ifdef USE_ARCHIVER
	$(info $(info )Archiving $@:)
	$(AR) crf $(BIN_DEBUG) $(OBJ_DEBUG)
endif
ifdef MAKE_SYMLINKS
	ln -sf $(OUT_DIR)/$(BIN_DEBUG_FULL_VERSION) $(OUT_DIR)/$(BIN_DEBUG_MINOR_VERSION)
	ln -sf $(OUT_DIR)/$(BIN_DEBUG_MINOR_VERSION) $(OUT_DIR)/$(BIN_DEBUG_MAJOR_VERSION)
	ln -sf $(OUT_DIR)/$(BIN_DEBUG_MAJOR_VERSION) $(OUT_DIR)/$(BIN_DEBUG_NO_VERSION)
endif

$(BIN_RELEASE): $(OBJ_RELEASE)
ifdef USE_LINKER
	$(info $(info )Linking: $@)
	$(CC) $(LDFLAGS) $(LDFLAGS_RELEASE) $(OBJ_RELEASE) -o $(BIN_RELEASE) $(LIBS_RELEASE)
endif
ifdef USE_ARCHIVER
	$(info $(info )Archiving $@:)
	$(AR) crf $(BIN_RELEASE) $(OBJ_RELEASE)
endif
ifdef MAKE_SYMLINKS
	ln -sf $(OUT_DIR)/$(BIN_RELEASE_FULL_VERSION) $(OUT_DIR)/$(BIN_RELEASE_MINOR_VERSION)
	ln -sf $(OUT_DIR)/$(BIN_RELEASE_MINOR_VERSION) $(OUT_DIR)/$(BIN_RELEASE_MAJOR_VERSION)
	ln -sf $(OUT_DIR)/$(BIN_RELEASE_MAJOR_VERSION) $(OUT_DIR)/$(BIN_RELEASE_NO_VERSION)
endif

$(BIN_GTEST): $(OBJ_GTEST)
	$(info $(info )Linking: $@)
	$(CC) $(LDFLAGS) $(LDFLAGS_GTEST) $(OBJ_GTEST) -o $(BIN_GTEST) $(LIBS_GTEST)

# 5) Basic build targets
create_project_structure:
	$(CMD_MKDIR) $(INC_DIR)
	$(CMD_MKDIR) $(SRC_DIR)
	$(CMD_MKDIR) $(GTEST_DIR)
	$(CMD_MKDIR) $(OUT_DIR)
	$(CMD_MKDIR) $(OBJ_DEBUG_DIR)
	$(CMD_MKDIR) $(OBJ_RELEASE_DIR)
	$(CMD_MKDIR) $(OBJ_GTEST_DIR)
	$(CMD_MKDIR) $(DOC_DIR)
	$(CMD_MKDIR) $(DOC_HTML_DIR)
	$(CMD_MKDIR) $(ETC_DIR)
	$(CMD_MKDIR) $(ETC_MAKE_DIR)
	$(CMD_MKDIR) $(ETC_SBIN_DIR)
	$(CMD_MKDIR) $(ETC_DOC_DIR)
	$(CMD_CHMOD) $(ETC_SBIN_DIR)

prebuild: run_sanity_checks create_project_structure
	$(info Building $(TYPE_NAME) "$(PROJECT_NAME)" in configuration "$(PROJECT_CONFIG)")

prebuild_doc: run_sanity_checks create_project_structure
	$(info Update Documentation)
	cat $(DOC_CFG_TEMPLATE) > $(DOC_CFG)
	sed -i "s/^PROJECT_NAME =.*/PROJECT_NAME = $(PROJECT_NAME)/g" $(DOC_CFG)
	sed -i "s/^PROJECT_NUMBER =.*/PROJECT_NUMBER = $(VERSION)/g"  $(DOC_CFG)

# Targets for all configurations
build_debug: prebuild $(BIN_DEBUG)

build_release: prebuild $(BIN_RELEASE)

build_gtest: prebuild $(BIN_DEBUG) $(BIN_GTEST)

build_doc: prebuild_doc
	doxygen $(DOC_CFG)

clean_debug:
	$(CMD_RM) $(OBJ_DEBUG_DIR) $(OUT_DIR)/$(BIN_DEBUG_NO_VERSION)*

clean_release:
	$(CMD_RM) $(OBJ_RELEASE_DIR) $(OUT_DIR)/$(BIN_RELEASE_NO_VERSION)*

clean_gtest: clean_debug
	$(CMD_RM) $(OBJ_GTEST_DIR) $(BIN_GTEST)

clean_doc:
	$(CMD_RM) $(DOC_HTML_DIR)

run_debug: build_debug
	$(info $(info )Executing "$(BIN_DEBUG)":)
	$(BIN_DEBUG) $(RUN_ARGS)

run_release: build_release
	$(info $(info )Executing "$(BIN_RELEASE)":)
	$(BIN_RELEASE) $(RUN_ARGS)

run_gtest: build_gtest
	$(info $(info )Executing "$(BIN_GTEST)":)
	$(BIN_GTEST) $(RUN_ARGS)

debug_debug: build_debug
	$(info $(info )Debugging "$(BIN_DEBUG)":)
	$(DEBUGGER) --args $(DEBUG_ARGS) $(BIN_DEBUG)

debug_release: build_release
	$(info $(info )Debugging "$(BIN_RELEASE)":)
	$(DEBUGGER) --args $(DEBUG_ARGS) $(BIN_RELEASE)

debug_gtest: build_gtest
	$(info $(info )Debugging "$(BIN_GTEST)":)
	$(DEBUGGER) --args $(DEBUG_ARGS) $(BIN_GTEST)

install_include:
	$(ETC_SBIN_DIR)/install_includes.sh $(INC_DIR) $(DIST_INC_DIR)

install_debug: build_debug install_include
ifeq ($(PROJECT_TYPE), binary)
	sudo $(CMD_CP) $(BIN_DEBUG) $(DIST_BIN_DIR)
else ifeq ($(PROJECT_TYPE), libstatic)
	sudo $(CMD_CP) $(BIN_DEBUG) $(DIST_LIB_DIR)
else ifeq ($(PROJECT_TYPE), libshared)
	sudo $(CMD_CP) $(BIN_DEBUG) $(DIST_LIB_DIR)
	sudo ln -sf $(DIST_LIB_DIR)/$(BIN_DEBUG_FULL_VERSION)  $(DIST_LIB_DIR)/$(BIN_DEBUG_MINOR_VERSION)
	sudo ln -sf $(DIST_LIB_DIR)/$(BIN_DEBUG_MINOR_VERSION) $(DIST_LIB_DIR)/$(BIN_DEBUG_MAJOR_VERSION)
	sudo ln -sf $(DIST_LIB_DIR)/$(BIN_DEBUG_MAJOR_VERSION) $(DIST_LIB_DIR)/$(BIN_DEBUG_NO_VERSION)
endif

install_release: build_release install_include
ifeq ($(PROJECT_TYPE), binary)
	sudo $(CMD_CP) $(BIN_RELEASE) $(DIST_BIN_DIR)
else ifeq ($(PROJECT_TYPE), libstatic)
	sudo $(CMD_CP) $(BIN_RELEASE) $(DIST_LIB_DIR)
else ifeq ($(PROJECT_TYPE), libshared)
	sudo $(CMD_CP) $(BIN_RELEASE) $(DIST_LIB_DIR)
	sudo ln -sf $(DIST_LIB_DIR)/$(BIN_RELEASE_FULL_VERSION)  $(DIST_LIB_DIR)/$(BIN_RELEASE_MINOR_VERSION)
	sudo ln -sf $(DIST_LIB_DIR)/$(BIN_RELEASE_MINOR_VERSION) $(DIST_LIB_DIR)/$(BIN_RELEASE_MAJOR_VERSION)
	sudo ln -sf $(DIST_LIB_DIR)/$(BIN_RELEASE_MAJOR_VERSION) $(DIST_LIB_DIR)/$(BIN_RELEASE_NO_VERSION)
endif

uninstall_include:
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_INC_DIR)

uninstall_debug:
ifeq ($(PROJECT_TYPE), binary)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_BIN_DIR)/$(BIN_DEBUG_NO_VERSION)
else ifeq ($(PROJECT_TYPE), libstatic)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_DEBUG_NO_VERSION)
else ifeq ($(PROJECT_TYPE), libshared)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_DEBUG_NO_VERSION)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_DEBUG_MAJOR_VERSION)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_DEBUG_MINOR_VERSION)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_DEBUG_FULL_VERSION)
endif

uninstall_release:
ifeq ($(PROJECT_TYPE), binary)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_BIN_DIR)/$(BIN_RELEASE_NO_VERSION)
else ifeq ($(PROJECT_TYPE), libstatic)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_RELEASE_NO_VERSION)
else ifeq ($(PROJECT_TYPE), libshared)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_RELEASE_NO_VERSION)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_RELEASE_MAJOR_VERSION)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_RELEASE_MINOR_VERSION)
	$(ETC_SBIN_DIR)/uninstall_save.sh $(DIST_LIB_DIR)/$(BIN_RELEASE_FULL_VERSION)
endif

# Configuration dependent Targets:
# Targets for debug
ifeq ($(PROJECT_CONFIG), debug)
build: build_debug
clean: clean_debug
ifeq ($(PROJECT_TYPE), binary)
run:   run_debug
debug: debug_debug
endif
endif

#Targets for release
ifeq ($(PROJECT_CONFIG), release)
build: build_release
clean: clean_release
ifeq ($(PROJECT_TYPE), binary)
run:   run_release
debug: debug_release
endif
endif

# Targets for unittests
ifeq ($(PROJECT_CONFIG), gtest)
build: build_gtest
clean: clean_gtest
run:   run_gtest
debug: debug_gtest
endif

rebuild: clean build

doc: clean_doc build_doc

# Targets based on given Makefile setup.
#build:   build_release
#all:     clean build_release build_debug build_test
